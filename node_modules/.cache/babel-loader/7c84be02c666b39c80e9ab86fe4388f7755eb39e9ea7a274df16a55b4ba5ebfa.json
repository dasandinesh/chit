{"ast":null,"code":"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { getaccount_url } from \"../url/url\";\nimport { Row, Col } from \"react-bootstrap\";\nconst Accountdata = () => {\n  // const [chitData, setChitData] = useState([]);\n  // const [filteredChitData, setFilteredChitData] = useState([]);\n  // const [filters, setFilters] = useState({\n  //   memberName: \"\",\n  //   fromDate: \"\",\n  //   toDate: \"\",\n  //   minCredit: \"\",\n  //   maxCredit: \"\",\n  //   minDebit: \"\",\n  //   maxDebit: \"\",\n  // });\n  // useEffect(() => {\n  //   fetchData();\n  // }, []);\n  // const fetchData = async () => {\n  //   try {\n  //     const response = await axios.get(getaccount_url);\n  //     setChitData(response.data); // Assuming the data structure is an array\n  //     setFilteredChitData(response.data); // Initially set filtered data to all data\n  //   } catch (error) {\n  //     console.error(\"Error fetching data:\", error);\n  //   }\n  // };\n  // useEffect(() => {\n  //   applyFilters();\n  // }, [chitData, filters]); // Whenever chitData or filters change, reapply filters\n  // const applyFilters = () => {\n  //   const filteredData = chitData.filter((chit) => {\n  //     return (\n  //       (filters.memberName === \"\" ||\n  //         chit.memberName\n  //           .toLowerCase()\n  //           .includes(filters.memberName.toLowerCase())) &&\n  //       (filters.fromDate === \"\" ||\n  //         new Date(chit.date) >= new Date(filters.fromDate)) &&\n  //       (filters.toDate === \"\" ||\n  //         new Date(chit.date) <= new Date(filters.toDate)) &&\n  //       (filters.minCredit === \"\" ||\n  //         parseFloat(chit.credit) >= parseFloat(filters.minCredit)) &&\n  //       (filters.maxCredit === \"\" ||\n  //         parseFloat(chit.credit) <= parseFloat(filters.maxCredit)) &&\n  //       (filters.minDebit === \"\" ||\n  //         parseFloat(chit.debit) >= parseFloat(filters.minDebit)) &&\n  //       (filters.maxDebit === \"\" ||\n  //         parseFloat(chit.debit) <= parseFloat(filters.maxDebit))\n  //     );\n  //   });\n  //   setFilteredChitData(filteredData);\n  // };\n  // const handleFilterChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setFilters((prevFilters) => ({\n  //     ...prevFilters,\n  //     [name]: value,\n  //   }));\n  // };\n  // // Calculate total credit and debit\n  // const totalCredit = filteredChitData.reduce(\n  //   (total, chit) => total + parseFloat(chit.credit),\n  //   0\n  // );\n  // const totalDebit = filteredChitData.reduce(\n  //   (total, chit) => total + parseFloat(chit.debit),\n  //   0\n  // );\n  // return (\n  //   <div className=\"container\">\n  //     <br />\n  //     <Row>\n  //       <Col>\n  //         <input\n  //           type=\"text\"\n  //           name=\"memberName\"\n  //           value={filters.memberName}\n  //           onChange={handleFilterChange}\n  //           className=\"form-control\"\n  //           placeholder=\"Member Name\"\n  //         />\n  //       </Col>\n  //       <Col>\n  //         <input\n  //           type=\"date\"\n  //           name=\"fromDate\"\n  //           value={filters.fromDate}\n  //           onChange={handleFilterChange}\n  //           className=\"form-control\"\n  //         />\n  //       </Col>\n  //       <Col>\n  //         <input\n  //           type=\"date\"\n  //           name=\"toDate\"\n  //           value={filters.toDate}\n  //           onChange={handleFilterChange}\n  //           className=\"form-control\"\n  //         />\n  //       </Col>\n  //       <Col>\n  //         <input\n  //           type=\"number\"\n  //           name=\"minCredit\"\n  //           value={filters.minCredit}\n  //           onChange={handleFilterChange}\n  //           className=\"form-control\"\n  //           placeholder=\"Min Credit\"\n  //         />\n  //       </Col>\n  //       <Col>\n  //         <input\n  //           type=\"number\"\n  //           name=\"maxCredit\"\n  //           value={filters.maxCredit}\n  //           onChange={handleFilterChange}\n  //           className=\"form-control\"\n  //           placeholder=\"Max Credit\"\n  //         />\n  //       </Col>\n  //       <Col>\n  //         <input\n  //           type=\"number\"\n  //           name=\"minDebit\"\n  //           value={filters.minDebit}\n  //           onChange={handleFilterChange}\n  //           className=\"form-control\"\n  //           placeholder=\"Min Debit\"\n  //         />\n  //       </Col>\n  //       <Col>\n  //         <input\n  //           type=\"number\"\n  //           name=\"maxDebit\"\n  //           value={filters.maxDebit}\n  //           onChange={handleFilterChange}\n  //           className=\"form-control\"\n  //           placeholder=\"Max Debit\"\n  //         />\n  //       </Col>\n  //     </Row>\n  //     <br />\n  //     <Row>\n  //       <Col>\n  //         <h4>Total Credit: {totalCredit}</h4>\n  //       </Col>\n  //       <Col>\n  //         <h4>Total Debit: {totalDebit}</h4>\n  //       </Col>\n  //     </Row>\n  //     {/* Display filtered data */}\n  //     <table className=\"table\">\n  //       <thead>\n  //         <tr>\n  //           <th>Member Name</th>\n  //           <th>Date</th>\n  //           <th>Credit</th>\n  //           <th>Debit</th>\n  //           <th>Description</th>\n  //         </tr>\n  //       </thead>\n  //       <tbody>\n  //         {filteredChitData.map((chit, index) => (\n  //           <tr key={index}>\n  //             <td>{chit.memberName}</td>\n  //             <td>{chit.date}</td>\n  //             <td>{chit.credit}</td>\n  //             <td>{chit.debit}</td>\n  //             <td>{chit.description}</td>\n  //           </tr>\n  //         ))}\n  //       </tbody>\n  //     </table>\n  //   </div>\n  // );\n};\n_c = Accountdata;\nexport default Accountdata;\nvar _c;\n$RefreshReg$(_c, \"Accountdata\");","map":{"version":3,"names":["React","useEffect","useState","axios","getaccount_url","Row","Col","Accountdata","_c","$RefreshReg$"],"sources":["C:/Users/ghost/react/cite/src/components/account/account.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { getaccount_url } from \"../url/url\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nconst Accountdata = () => {\r\n  // const [chitData, setChitData] = useState([]);\r\n  // const [filteredChitData, setFilteredChitData] = useState([]);\r\n  // const [filters, setFilters] = useState({\r\n  //   memberName: \"\",\r\n  //   fromDate: \"\",\r\n  //   toDate: \"\",\r\n  //   minCredit: \"\",\r\n  //   maxCredit: \"\",\r\n  //   minDebit: \"\",\r\n  //   maxDebit: \"\",\r\n  // });\r\n  // useEffect(() => {\r\n  //   fetchData();\r\n  // }, []);\r\n  // const fetchData = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(getaccount_url);\r\n  //     setChitData(response.data); // Assuming the data structure is an array\r\n  //     setFilteredChitData(response.data); // Initially set filtered data to all data\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching data:\", error);\r\n  //   }\r\n  // };\r\n  // useEffect(() => {\r\n  //   applyFilters();\r\n  // }, [chitData, filters]); // Whenever chitData or filters change, reapply filters\r\n  // const applyFilters = () => {\r\n  //   const filteredData = chitData.filter((chit) => {\r\n  //     return (\r\n  //       (filters.memberName === \"\" ||\r\n  //         chit.memberName\r\n  //           .toLowerCase()\r\n  //           .includes(filters.memberName.toLowerCase())) &&\r\n  //       (filters.fromDate === \"\" ||\r\n  //         new Date(chit.date) >= new Date(filters.fromDate)) &&\r\n  //       (filters.toDate === \"\" ||\r\n  //         new Date(chit.date) <= new Date(filters.toDate)) &&\r\n  //       (filters.minCredit === \"\" ||\r\n  //         parseFloat(chit.credit) >= parseFloat(filters.minCredit)) &&\r\n  //       (filters.maxCredit === \"\" ||\r\n  //         parseFloat(chit.credit) <= parseFloat(filters.maxCredit)) &&\r\n  //       (filters.minDebit === \"\" ||\r\n  //         parseFloat(chit.debit) >= parseFloat(filters.minDebit)) &&\r\n  //       (filters.maxDebit === \"\" ||\r\n  //         parseFloat(chit.debit) <= parseFloat(filters.maxDebit))\r\n  //     );\r\n  //   });\r\n  //   setFilteredChitData(filteredData);\r\n  // };\r\n  // const handleFilterChange = (e) => {\r\n  //   const { name, value } = e.target;\r\n  //   setFilters((prevFilters) => ({\r\n  //     ...prevFilters,\r\n  //     [name]: value,\r\n  //   }));\r\n  // };\r\n  // // Calculate total credit and debit\r\n  // const totalCredit = filteredChitData.reduce(\r\n  //   (total, chit) => total + parseFloat(chit.credit),\r\n  //   0\r\n  // );\r\n  // const totalDebit = filteredChitData.reduce(\r\n  //   (total, chit) => total + parseFloat(chit.debit),\r\n  //   0\r\n  // );\r\n  // return (\r\n  //   <div className=\"container\">\r\n  //     <br />\r\n  //     <Row>\r\n  //       <Col>\r\n  //         <input\r\n  //           type=\"text\"\r\n  //           name=\"memberName\"\r\n  //           value={filters.memberName}\r\n  //           onChange={handleFilterChange}\r\n  //           className=\"form-control\"\r\n  //           placeholder=\"Member Name\"\r\n  //         />\r\n  //       </Col>\r\n  //       <Col>\r\n  //         <input\r\n  //           type=\"date\"\r\n  //           name=\"fromDate\"\r\n  //           value={filters.fromDate}\r\n  //           onChange={handleFilterChange}\r\n  //           className=\"form-control\"\r\n  //         />\r\n  //       </Col>\r\n  //       <Col>\r\n  //         <input\r\n  //           type=\"date\"\r\n  //           name=\"toDate\"\r\n  //           value={filters.toDate}\r\n  //           onChange={handleFilterChange}\r\n  //           className=\"form-control\"\r\n  //         />\r\n  //       </Col>\r\n  //       <Col>\r\n  //         <input\r\n  //           type=\"number\"\r\n  //           name=\"minCredit\"\r\n  //           value={filters.minCredit}\r\n  //           onChange={handleFilterChange}\r\n  //           className=\"form-control\"\r\n  //           placeholder=\"Min Credit\"\r\n  //         />\r\n  //       </Col>\r\n  //       <Col>\r\n  //         <input\r\n  //           type=\"number\"\r\n  //           name=\"maxCredit\"\r\n  //           value={filters.maxCredit}\r\n  //           onChange={handleFilterChange}\r\n  //           className=\"form-control\"\r\n  //           placeholder=\"Max Credit\"\r\n  //         />\r\n  //       </Col>\r\n  //       <Col>\r\n  //         <input\r\n  //           type=\"number\"\r\n  //           name=\"minDebit\"\r\n  //           value={filters.minDebit}\r\n  //           onChange={handleFilterChange}\r\n  //           className=\"form-control\"\r\n  //           placeholder=\"Min Debit\"\r\n  //         />\r\n  //       </Col>\r\n  //       <Col>\r\n  //         <input\r\n  //           type=\"number\"\r\n  //           name=\"maxDebit\"\r\n  //           value={filters.maxDebit}\r\n  //           onChange={handleFilterChange}\r\n  //           className=\"form-control\"\r\n  //           placeholder=\"Max Debit\"\r\n  //         />\r\n  //       </Col>\r\n  //     </Row>\r\n  //     <br />\r\n  //     <Row>\r\n  //       <Col>\r\n  //         <h4>Total Credit: {totalCredit}</h4>\r\n  //       </Col>\r\n  //       <Col>\r\n  //         <h4>Total Debit: {totalDebit}</h4>\r\n  //       </Col>\r\n  //     </Row>\r\n  //     {/* Display filtered data */}\r\n  //     <table className=\"table\">\r\n  //       <thead>\r\n  //         <tr>\r\n  //           <th>Member Name</th>\r\n  //           <th>Date</th>\r\n  //           <th>Credit</th>\r\n  //           <th>Debit</th>\r\n  //           <th>Description</th>\r\n  //         </tr>\r\n  //       </thead>\r\n  //       <tbody>\r\n  //         {filteredChitData.map((chit, index) => (\r\n  //           <tr key={index}>\r\n  //             <td>{chit.memberName}</td>\r\n  //             <td>{chit.date}</td>\r\n  //             <td>{chit.credit}</td>\r\n  //             <td>{chit.debit}</td>\r\n  //             <td>{chit.description}</td>\r\n  //           </tr>\r\n  //         ))}\r\n  //       </tbody>\r\n  //     </table>\r\n  //   </div>\r\n  // );\r\n};\r\n\r\nexport default Accountdata;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,YAAY;AAC3C,SAASC,GAAG,EAAEC,GAAG,QAAQ,iBAAiB;AAE1C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACxjB,eAAeA,WAAW;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}